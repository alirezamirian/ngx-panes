[
  {
    "identifier": "PaneHeaderComponent",
    "description": "<p><code>ngx-pane-header</code> is used for providing custom headers for panes.</p>\n<p>By default the header of the pane consist of a simple text label\n(which is determined by {@link PaneComponent#title PaneComponent title input}).\nYou can override this behaviour, however and use custom content as\npane header by using a <code>&lt;ngx-pane-header&gt;...&lt;/ngx-pane-header&gt;</code> inside\n<code>&lt;ngx-pane&gt;...&lt;/ngx-pane&gt;</code> component.</p>\n",
    "methods": [],
    "properties": [
      {
        "name": "templateRef",
        "type": "TemplateRef<any>",
        "description": ""
      }
    ],
    "type": "directive",
    "isComponent": true,
    "selector": "ngx-pane-header",
    "inputs": [],
    "outputs": [],
    "fileName": "lib/pane-header/pane-header.component.ts",
    "usage": "<ngx-panes>\n  <ngx-pane title=\"First Pane\">\n    <ngx-pane-header>this is a <b>special</b> header</ngx-pane-header>\n    <!-- pane content goes here -->\n  </ngx-pane>\n  <ngx-pane title=\"will be used for header in absense of ngx-pane-header\">...</ngx-pane>\n</ngx-panes>"
  },
  {
    "identifier": "PaneResizerComponent",
    "description": "",
    "methods": [],
    "properties": [],
    "type": "directive",
    "isComponent": true,
    "selector": "ngx-pane-resizer",
    "inputs": [],
    "outputs": [],
    "fileName": "lib/pane-resizer/pane-resizer.component.ts"
  },
  {
    "identifier": "PaneViewComponent",
    "description": "",
    "methods": [],
    "properties": [],
    "type": "directive",
    "isComponent": true,
    "selector": "ngx-pane-view",
    "inputs": [
      {
        "name": "pane",
        "type": "any",
        "description": ""
      }
    ],
    "outputs": [],
    "fileName": "lib/pane-view.component.ts"
  },
  {
    "identifier": "PaneComponent",
    "description": "<p>Pane components, are used inside {@link PanesComponent}. Each pane should have a title which is shown\nin side tabs area. By default, the title is used for <strong>pane header</strong> also.</p>\n<p>Pane header is a thin bar on top of the selected pane which shows a label and also contains\nsome default ui controls for the pane.</p>\n",
    "methods": [
      {
        "name": "open",
        "description": "<p>Opens this pane. Does nothing if already opened.</p>\n",
        "args": [],
        "returnType": "void"
      },
      {
        "name": "close",
        "description": "<p>Closes this pane. Does nothing if it&#39;s not opened.</p>\n",
        "args": [],
        "returnType": "void"
      }
    ],
    "properties": [
      {
        "name": "content",
        "type": "any",
        "description": ""
      },
      {
        "name": "header",
        "type": "PaneHeaderComponent",
        "description": ""
      }
    ],
    "type": "directive",
    "isComponent": true,
    "selector": "ngx-pane",
    "inputs": [
      {
        "name": "id",
        "type": "string",
        "description": "<p>unique identifier of the pane.</p>\n"
      },
      {
        "name": "opened",
        "type": "boolean",
        "description": "<p>Whether this pane should be opened or not. Usually used for initialization.\nWhenever it changes to <code>true</code>, this pane will be opened (if not already opened)\nand whenever it changes to <code>false</code> this pane will be closed if it&#39;s currently open.</p>\n"
      },
      {
        "name": "resizable",
        "defaultValue": "true",
        "type": "boolean",
        "description": "<p>Whether user can resize pane or not.</p>\n"
      },
      {
        "name": "title",
        "type": "string",
        "description": "<p>Title of the pane to be shown in pane&#39;s tab.\nIt will also appear in pane&#39;s header in the absence of <code>ngx-pane-header</code>.</p>\n"
      },
      {
        "name": "width",
        "type": "number",
        "description": "<p>Width of the pane. More precisely, <strong>width</strong> for <strong>horizontally</strong> aligned and <strong>height</strong> for <strong>vertically</strong>\naligned panes.\nIf unset, <code>defaultWidth</code> of the host <code>ngx-panes</code> will be used. If both are undefined, the content of the\npane will determine its width. Resizing pane (if enabled) changes the pane&#39;s width.</p>\n"
      }
    ],
    "outputs": [],
    "fileName": "lib/pane/pane.component.ts",
    "usage": "<ngx-panes>\n  <!-- Simple pane with a title -->\n  <ngx-pane title=\"project\">...</ngx-pane>\n\n  <!-- Different title and header. Header is used in top of the selected pane, title is used inside pane's tab -->\n  <ngx-pane title=\"structure\">\n    <div ngx-pane-header>custom header</div>\n    ...\n  </ngx-pane>\n</ngx-panes>"
  },
  {
    "type": "variable",
    "identifier": "PANES_DEFAULTS",
    "description": "<p>Injection token for providing defaults for some input parameters of {@link PanesComponent pane components}.\nThe value of this injection token must be of type {@link PanesDefaults}.</p>\n",
    "fileName": "lib/panes-config.ts",
    "usage": "const panesDefaults: PanesDefaults = { resizable: false };\n\n// Configuring global defaults for all panes in the app.\n@NgModule({\n  //...\n  providers: [\n    // ...\n    { provide: PANES_DEFAULTS, useValue: panesDefaults }\n  ]\n})\nexport class AppModule {}\n\n// Configuring defaults for all child panes of some component.\n@Component({\n  // ...\n  providers: [{ provide: PANES_DEFAULTS, useValue: panesDefaults }]\n})\nclass SomeComponent {}\n",
    "usageLang": "typescript"
  },
  {
    "type": "type",
    "identifier": "PanesDefaults",
    "description": "<p>Configuration to be provided as default parameters for all <code>ngx-panes</code> child components.\nObject of this type provided as {@link PANES_DEFAULTS} injection token will be picked up\n{@link PanesComponent} to use them for default values of some configuration inputs.</p>\n",
    "methods": [],
    "properties": [
      {
        "name": "autoOpen",
        "type": "boolean",
        "description": "<p>Default value for {@link PanesComponent#autoOpen} input.</p>\n"
      },
      {
        "name": "defaultWidth",
        "type": "number",
        "description": "<p>Default value for {@link PanesComponent#defaultWidth} input.</p>\n"
      },
      {
        "name": "resizable",
        "type": "boolean",
        "description": "<p>Default value for {@link PanesComponent#resizable} input.</p>\n"
      },
      {
        "name": "toggleable",
        "type": "boolean",
        "description": "<p>Default value for {@link PanesComponent#toggleable} input.</p>\n"
      }
    ],
    "fileName": "lib/panes-config.ts"
  },
  {
    "identifier": "NgxPanesModule",
    "description": "<p>The main module for ngx-panes. Add it to <code>imports</code> of your module.</p>\n",
    "methods": [],
    "properties": [],
    "type": "ngModule",
    "declarations": [
      "lib/panes/panes.component#PanesComponent",
      "lib/pane/pane.component#PaneComponent",
      "lib/pane-header/pane-header.component#PaneHeaderComponent"
    ],
    "services": [],
    "fileName": "lib/panes.module.ts",
    "usage": "@NgModule({\n  imports: [\n    // ...\n    NgxPanesModule\n    //...\n  ]\n})\nexport class AppModule {}\n",
    "usageLang": "typescript"
  },
  {
    "identifier": "PanesComponent",
    "description": "<p>Renders a list of panes, navigatable with side tabs.</p>\n",
    "methods": [
      {
        "name": "open",
        "description": "<p>selects a child pane.</p>\n",
        "args": [
          {
            "name": "pane",
            "type": "PaneComponent",
            "description": "<p>child <code>PaneComponent</code> instance to select</p>\n"
          }
        ],
        "returnType": "void"
      },
      {
        "name": "close",
        "description": "<p>Closes currently selected pane. Does nothing if already closed.</p>\n",
        "args": [],
        "returnType": "void"
      }
    ],
    "properties": [
      {
        "name": "_align",
        "type": "Align",
        "description": ""
      },
      {
        "name": "_relativeAlign",
        "type": "RelativeAlign",
        "description": ""
      },
      {
        "name": "align",
        "type": "\"left\" | \"right\" | \"top\" | \"bottom\" | \"start\" | \"end\"",
        "description": "<p>Direction which the ngx-panes is aligned. It can be a {@link RelativeAlign} or Align.</p>\n"
      },
      {
        "name": "headerHost",
        "type": "ViewContainerRef",
        "description": ""
      },
      {
        "name": "maxSize",
        "type": "number",
        "description": ""
      },
      {
        "name": "panes",
        "type": "QueryList<PaneComponent>",
        "description": ""
      },
      {
        "name": "paneView",
        "type": "PaneViewComponent",
        "description": ""
      },
      {
        "name": "selectedPane",
        "type": "PaneComponent",
        "description": "<p>returns currently selected pane</p>\n"
      },
      {
        "name": "width",
        "type": "number",
        "description": ""
      }
    ],
    "type": "directive",
    "isComponent": true,
    "selector": "ngx-panes",
    "inputs": [
      {
        "name": "align",
        "type": "\"left\" | \"right\" | \"top\" | \"bottom\" | \"start\" | \"end\"",
        "description": "<p>Direction which the ngx-panes is aligned. It can be a {@link RelativeAlign} or Align.</p>\n"
      },
      {
        "name": "autoOpen",
        "defaultValue": "true",
        "type": "boolean",
        "description": "<p>Whether or not the last pane should be opened if no pane is marked initially as opened.</p>\n"
      },
      {
        "name": "defaultWidth",
        "type": "number",
        "description": "<p>Default width (in pixels) to be used for any child pane with an undefined width.\nIf you don&#39;t specify a default width, child panes will <strong>wrap they content</strong>.</p>\n"
      },
      {
        "name": "toggleable",
        "defaultValue": "true",
        "type": "boolean",
        "description": "<p>Whether clicking on tabs toggles the selected panes or not. If toggleable is false, clicking on currently open\npane&#39;s tab will do nothing.</p>\n"
      }
    ],
    "outputs": [],
    "fileName": "lib/panes/panes.component.ts",
    "examples": [
      {
        "content": "<ngx-panes>\n<ngx-pane></ngx-pane>\n</ngx-panes>"
      }
    ],
    "usage": "<ngx-panes>\n  <ngx-pane title=\"First Pane\">...</ngx-pane>\n  <ngx-pane title=\"Second Pane\">...</ngx-pane>\n</ngx-panes>"
  },
  {
    "type": "typeAlias",
    "identifier": "RelativeAlign",
    "description": "<p>Direction independent alignment. See also {@link Align}.</p>\n",
    "source": "export type RelativeAlign = 'start'|'end'|'top'|'bottom';",
    "fileName": "lib/panes/rtl-utils.ts"
  },
  {
    "type": "typeAlias",
    "identifier": "Align",
    "description": "<p>See also {@link RelativeAlign}</p>\n",
    "source": "export type Align = 'left'|'right'|'top'|'bottom';",
    "fileName": "lib/panes/rtl-utils.ts"
  }
]